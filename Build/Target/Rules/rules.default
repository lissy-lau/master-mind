#==============================================================================
# rules.default
#
# This file contains rules for building targets.
#
#==============================================================================

#==============================================================================
# Default Build
#==============================================================================

.PHONY: all

all: $(BUILD_TARGET)
	@$(TIMESTAMP)


#==============================================================================
# Developer Defined Build Additions
#
# This provides additional flexibility for users who want do extra things
# without impacting the default rules or makefiles.
#==============================================================================

#include $(BLD_DIR)/macros.extra


#==============================================================================
# Rules for Development tools
#==============================================================================

#include $(RULES_ROOT)/rules.flint


#==============================================================================
# All targets have the export and component include path by default.
#==============================================================================

INCLUDE_STD := \
            -I/usr/include/libxml2 \
            -I$(INC_DIR) \
            -I$(EXPORT_DIR)


#==============================================================================
# Defines, Flags and Include Paths
#==============================================================================

ASMFLAGS := $(OPT_ASM_STD) $(OPT_ASM_MOD) $(OPT_ASM_CATEGORY) $(OPT_ASM_TARGET) $(OPT_ASM_EXTRA)
CFLAGS   := $(OPT_CC_STD) $(OPT_CC_MOD) $(OPT_CC_CATEGORY) $(OPT_CC_TARGET) $(OPT_CC_EXTRA)
CXXFLAGS := $(OPT_CXX_STD) $(OPT_CXX_MOD) $(OPT_CXX_CATEGORY) $(OPT_CXX_TARGET) $(OPT_CXX_EXTRA)
LDFLAGS  := $(OPT_LD_STD) $(OPT_LD_MOD) $(OPT_LD_EXTRA)

DEFINES  := $(DEF_STD) $(DEF_MOD) $(DEF_CATEGORY) $(DEF_TARGET) $(DEF_EXTRA)
INCLUDES := $(INCLUDE_STD) $(INCLUDE_MOD) $(INCLUDE_EXTRA)


#===============================================================================
# If LINK_ONLY is defined, then module libraries will be linked together 
# without recompiling the objects. 
# This is done by moving the libraries in OBJS_TO_LINK to LIBS_TO_LINK
#
# This is ORDER DEPENDENT!! OBJS_TO_LINK NEEDS TO BE FIRST in the link order.
# as code is only pulled from an archive (.a) if it has already been referenced
#===============================================================================

ifdef LINK_ONLY
    LIBS_TO_LINK := $(OBJS_TO_LINK) $(LIBS_TO_LINK)
    OBJS_TO_LINK :=
endif


#==============================================================================
# RULES FOR GENERATION OF VARIOUS MODULE OBJECTS
#==============================================================================

#==============================================================================
# Rule: STANDARD MODULE OBJECT from ASSEMBLER in $(SRC_DIR)
#

$(OBJ_DIR)/%.o : $(SRC_DIR)/%.asm
	@$(TIMESTAMP)
	$(ASM) $(ASMFLAGS) $(DEFINES) $(INCLUDES) -o $@ $<;

$(OBJ_DIR)/%.o : $(SRC_DIR)/%.src
	@$(TIMESTAMP)
	$(ASM) $(ASMFLAGS) $(DEFINES) $(INCLUDES) -o $@ $<;

$(OBJ_DIR)/%.o : $(SRC_DIR)/%.s
	@$(TIMESTAMP)
	$(ASM) $(ASMFLAGS) $(DEFINES) $(INCLUDES) -o $@ $<;


#==============================================================================
# Rule: STANDARD MODULE OBJECT from C CODE in $(SRC_DIR)
#       Do not flint if AVOID_FLINT is defined.
#

ifdef FLINT
$(OBJ_DIR)/%.o : $(SRC_DIR)/%.c $(INC_DIR)/%.h $(FLINT_DIR)/%.flint 
else
$(OBJ_DIR)/%.o : $(SRC_DIR)/%.c $(INC_DIR)/%.h
endif
	@$(TIMESTAMP)
	$(CC) $(CFLAGS) $(DEFINES) $(INCLUDES) -c $< -o $@;


#==============================================================================
# Rule: STANDARD MODULE OBJECT from C++ CODE in $(SRC_DIR)
#       Do not flint if AVOID_FLINT is defined.
#

ifdef FLINT
$(OBJ_DIR)/$(MODULE)_$(UI)_Main.o: $(MOD_DIR)/$(MODULE)_$(UI)_Main.cpp $(FLINT_DIR)/%.flint
else
$(OBJ_DIR)/$(MODULE)_$(UI)_Main.o: $(MOD_DIR)/$(MODULE)_$(UI)_Main.cpp
endif
	@$(TIMESTAMP)
	$(CXX) $(CXXFLAGS) $(DEFINES) $(INCLUDES) -c $< -o $@;

ifdef FLINT
$(OBJ_DIR)/$(MODULE)_Main.o: $(MOD_DIR)/$(MODULE)_Main.cpp $(FLINT_DIR)/%.flint
else
$(OBJ_DIR)/$(MODULE)_Main.o: $(MOD_DIR)/$(MODULE)_Main.cpp
endif
	@$(TIMESTAMP)
	$(CXX) $(CXXFLAGS) $(DEFINES) $(INCLUDES) -c $< -o $@;

ifdef FLINT
$(OBJ_DIR)/%.o : $(SRC_DIR)/%.cc $(INC_DIR)/%.hpp $(FLINT_DIR)/%.flint 
else
$(OBJ_DIR)/%.o : $(SRC_DIR)/%.cc $(INC_DIR)/%.hpp
endif
	@$(TIMESTAMP)
	$(CXX) $(CXXFLAGS) $(DEFINES) $(INCLUDES) -c $< -o $@;

ifdef FLINT
$(OBJ_DIR)/%.o : $(SRC_DIR)/%.cpp $(INC_DIR)/%.hpp $(FLINT_DIR)/%.flint 
else
$(OBJ_DIR)/%.o : $(SRC_DIR)/%.cpp $(INC_DIR)/%.hpp
endif
	@$(TIMESTAMP)
	$(CXX) $(CXXFLAGS) $(DEFINES) $(INCLUDES) -c $< -o $@;

ifdef FLINT
$(OBJ_DIR)/%.o : $(SRC_DIR)/%.cxx $(INC_DIR)/%.hpp $(FLINT_DIR)/%.flint 
else
$(OBJ_DIR)/%.o : $(SRC_DIR)/%.cxx $(INC_DIR)/%.hpp
endif
	@$(TIMESTAMP)
	$(CXX) $(CXXFLAGS) $(DEFINES) $(INCLUDES) -c $< -o $@;


#==============================================================================
# RULES FOR GENERATION OF VARIOUS MODULE LIBRARIES
#==============================================================================

#==============================================================================
# Rule: SHARED LIBRARY
#       

$(LIB_DIR)/lib%.so : $(OBJ_DIR)/%.o 
	@$(TIMESTAMP)
	$(LD) $(OPT_LD_STD) $(SYSTEM_LIBS) -shared -o $@ $<


#==============================================================================
# Rule: BUILD TARGET
#

$(BUILD_TARGET) : $(OBJS_TO_LINK) $(LIBS_TO_LINK) 
	@$(TIMESTAMP)
	$(LD) $(OPT_LD_STD) -o $@ $(OBJS_TO_LINK) $(OPT_LD_MOD) $(SYSTEM_LIBS)


#==============================================================================
# Clean Rule
#

.PHONY: clean
clean:
	$(RM) $(OBJ_DIR)/*
#	$(RM) $(FLINT_DIR)/*

.PHONY: cleanlib
cleanlib:
	$(RM) $(LIB_DIR)/*

.PHONY: cleanall
cleanall: clean cleanlib
	$(RM) $(BIN_DIR)/*


#==============================================================================
# Install Rule
#

.PHONY: install
install:
	$(MKDIR) $(INSTALL_BIN_PATH)
	$(MKDIR) $(INSTALL_LIB_PATH)
	$(CP) $(BUILD_TARGET) $(INSTALL_BIN_PATH)
	$(CP) $(LIBS_TO_LINK) $(INSTALL_LIB_PATH)


